# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]

jobs: # Um job é um conjunto de passos (testes e lint por exemplo), e jobs diferentes podem ser executados em paralelo
    pipeline-integracao-continua: # nome do job. (o nome do check (Require status checks to pass) na ruleset do github para proteger a branch deve ser esse aqui)

      runs-on: ubuntu-latest

      strategy:
        matrix:
          node-version: [18.x, 20.x, 22.x]
          # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

      steps:
      # "uses" vai usar uma action existente. "run" executa algum comando
    
      - uses: actions/checkout@v4 # Action padrão do github. Vai clonar o código, definir permissões apropriadas de arquivos, e acessar a pasta
    
      - name: Usar Node.js versão ${{ matrix.node-version }} # Dar um nome pra ação
        uses: actions/setup-node@v4 # Action também padrão do github. Vai fazer o setup do node
        with: # passar uma variável para essa action
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
    
      - name: Rodar um container necessário
        run: docker run hello-world # Os servidores do GitHub Actions já vem com docker, git, e outras ferramentas comuns instaladas

      - run: npm ci # Instala as dependências, assim como o npm install, só que a partir do package-lock, então vai instalar as dependências na versão exata especificada lá (já inclui o angular CLI)

      - name: Executar Lint
        run: npm run lint # (`ng lint`)

      - run: npm test # Executa o comando `test` do package.json. Esses testes são executados com o código fonte em TS (antes de compilar para JS)

      - name: Gerar artefato (transpilar de TS para JS) # [1]
        run: npm run build --if-present # Executa o comando `build` do package.json, se existir

      - name: Fazer upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: artefato_front_administracao
          path: ./dist/ # ou ./dist

# Usar variáveis no pipeline de actions: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables
# Usar secrets: https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
# Usar por exemplo para senha do DB: ${{ secrets.SENHA_DB }}
# Nota: Embora seja possível configurar variáveis de ambiente no executor, essa prática não é recomendada. As variáveis de ambiente podem ser expostas em logs de execução, comprometendo a segurança das credenciais.
# [1] JS is both interpreted and compiled (compiled just-in-time, instead of ahead-of-time). But for most intents and purposes, JS is only interpreted. 
#      Unless you work with browser engines, you don't have to worry about how it compiles *some* parts of the code (to be more efficient)
